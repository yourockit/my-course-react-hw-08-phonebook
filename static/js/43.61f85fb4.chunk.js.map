{"version":3,"file":"static/js/43.61f85fb4.chunk.js","mappings":"uNAEaA,GAAYC,EAAAA,EAAAA,IAAOC,EAAAA,EAAPD,CAAY,CACnCE,SAAU,QACVC,OAAQ,EACRC,OAAQ,MACRC,MAAO,Q,SCHIC,EAAY,WACvB,OACE,+BACE,SAACP,EAAD,CAAWQ,MAAM,UAAU,aAAW,MAAtC,UACE,SAACC,EAAA,EAAD,OAIP,E,iGCDYC,EAAU,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,OAI9B,OACE,iCACE,SAACC,EAAA,EAAD,WACE,SAACC,EAAA,EAAD,UAASH,EAAK,QAEhB,SAACI,EAAA,EAAD,CACEC,QAASJ,EACTK,WACE,+BACE,SAACC,EAAA,EAAD,CACEC,GAAI,CAAEC,QAAS,UACfC,UAAU,OACVC,QAAQ,QACRd,MAAM,eAJR,SAMGG,UAUd,E,oBCvCYY,EAAiB,SAAAC,GAAK,OAAIA,EAAMC,SAASC,KAAnB,E,UCOtBC,EAAe,WAC1B,IAAMF,GAAWG,EAAAA,EAAAA,IAAYL,GACvBM,GAASD,EAAAA,EAAAA,IAAYE,EAAAA,IACrBC,EAAmBN,EAASI,QAAO,SAAAG,GAAO,OAC9CA,EAAQrB,KAAKsB,cAAcC,SAASL,EAAOI,cADG,IAGhDF,EAAiBI,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEzB,KAAK2B,cAAcD,EAAE1B,KAAjC,IAGtB,IAAM4B,EAAkB,CAAC,EAUzB,OATAR,EAAiBS,KAAI,SAAAR,GACnB,IAAMS,EAAaT,EAAQrB,KAAK,GAAG+B,cAInC,OAHKH,EAAgBE,KACnBF,EAAgBE,GAAc,IAEzBF,EAAgBE,GAAYE,KAAKX,EACzC,KAIC,SAACY,EAAA,EAAD,CAAOC,QAAM,EAAC1B,GAAI,CAAE2B,GAAI,QAAxB,UACE,SAACC,EAAA,EAAD,UACGC,OAAOC,QAAQV,GAAiBC,KAAI,YAAyB,IAAD,eAAtBU,EAAsB,KAAdzB,EAAc,KAC3D,OACE,UAAC,EAAA0B,SAAD,YACE,SAACC,EAAA,EAAD,CAAejC,GAAI,CAAEkC,QAAS,oBAA9B,SACGH,KAEH,SAACI,EAAA,GAAD,CAAUnC,GAAI,CAAEoC,EAAG,GAAnB,UACE,SAACR,EAAA,EAAD,CAAM5B,GAAI,CAAEqC,MAAO,OAAQD,EAAG,GAA9B,SACG9B,EAASe,KAAI,gBAAGiB,EAAH,EAAGA,GAAI9C,EAAP,EAAOA,KAAMC,EAAb,EAAaA,OAAb,OACZ,2BACE,SAAC0C,EAAA,GAAD,CAAUI,QAAM,EAACC,WAAW,aAA5B,UACE,SAACjD,EAAD,CAAS+C,GAAIA,EAAI9C,KAAMA,EAAMC,OAAQA,OAEvC,SAACgD,EAAA,EAAD,CAAStC,QAAQ,YAJVmC,EADG,UANLP,EAkBlB,OAIR,E,UCjCD,EAdiB,WACf,IAAMW,GAAWC,EAAAA,EAAAA,MAKjB,OAHAC,EAAAA,EAAAA,YAAU,WACRF,GAASG,EAAAA,EAAAA,MACV,GAAE,CAACH,KAEF,iCACE,SAAClC,EAAD,KACA,SAACpB,EAAD,MAGL,C","sources":["components/ButtonAdd/ButtonAdd.styled.jsx","components/ButtonAdd/ButtonAdd.jsx","components/Contact/Contact.jsx","redux/contacts/selectors.js","components/ContactsList/ContactsList.jsx","pages/Contacts.jsx"],"sourcesContent":["import { Fab, styled } from '@mui/material';\n\nexport const StyledFab = styled(Fab)({\n  position: 'fixed',\n  zIndex: 1,\n  bottom: '1em',\n  right: '1em',\n});\n","import AddIcon from '@mui/icons-material/Add';\nimport { StyledFab } from './ButtonAdd.styled';\n\nexport const ButtonAdd = () => {\n  return (\n    <>\n      <StyledFab color=\"primary\" aria-label=\"add\">\n        <AddIcon />\n      </StyledFab>\n    </>\n  );\n};\n","// import { useDispatch } from 'react-redux';\n// import { deleteContact } from 'redux/contacts/operations';\n\nimport {\n  Avatar,\n  ListItemAvatar,\n  ListItemText,\n  Typography,\n} from '@mui/material';\n\nexport const Contact = ({ name, number }) => {\n  // const dispatch = useDispatch();\n  // const handleDelete = () => dispatch(deleteContact(id));\n\n  return (\n    <>\n      <ListItemAvatar>\n        <Avatar>{name[0]}</Avatar>\n      </ListItemAvatar>\n      <ListItemText\n        primary={number}\n        secondary={\n          <>\n            <Typography\n              sx={{ display: 'inline' }}\n              component=\"span\"\n              variant=\"body2\"\n              color=\"text.primary\"\n            >\n              {name}\n            </Typography>\n            {/* <button type=\"button\" onClick={handleDelete}>\n        Delete\n      </button>  */}\n          </>\n        }\n      />\n    </>\n  );\n};\n","export const selectContacts = state => state.contacts.items;\n","import { Divider, List, ListItem, ListSubheader, Paper } from '@mui/material';\nimport { Contact } from 'components/Contact/Contact';\nimport { Fragment } from 'react';\nimport { useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { getFilter } from 'redux/filterSlice';\n\nexport const ContactsList = () => {\n  const contacts = useSelector(selectContacts);\n  const filter = useSelector(getFilter);\n  const filteredContacts = contacts.filter(contact =>\n    contact.name.toLowerCase().includes(filter.toLowerCase())\n  );\n  filteredContacts.sort((a, b) => a.name.localeCompare(b.name));\n\n  //GROUP-CONTACTS======================\n  const groupedContacts = {};\n  filteredContacts.map(contact => {\n    const firstLeter = contact.name[0].toUpperCase();\n    if (!groupedContacts[firstLeter]) {\n      groupedContacts[firstLeter] = [];\n    }\n    return groupedContacts[firstLeter].push(contact);\n  });\n  //======================================\n\n  return (\n    <Paper square sx={{ pt: '50px' }}>\n      <List>\n        {Object.entries(groupedContacts).map(([symbol, contacts]) => {\n          return (\n            <Fragment key={symbol}>\n              <ListSubheader sx={{ bgcolor: 'background.paper' }}>\n                {symbol}\n              </ListSubheader>\n              <ListItem sx={{ p: 0 }}>\n                <List sx={{ width: '100%', p: 0 }}>\n                  {contacts.map(({ id, name, number }) => (\n                    <li key={id}>\n                      <ListItem button alignItems=\"flex-start\">\n                        <Contact id={id} name={name} number={number} />\n                      </ListItem>\n                      <Divider variant=\"inset\" />\n                    </li>\n                  ))}\n                </List>\n              </ListItem>\n            </Fragment>\n          );\n        })}\n      </List>\n    </Paper>\n  );\n};\n","import { ButtonAdd } from 'components/ButtonAdd/ButtonAdd';\nimport { ContactsList } from 'components/ContactsList/ContactsList';\nimport { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { fetchContacts } from 'redux/contacts/operations';\n\nconst Contacts = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n  return (\n    <>\n      <ContactsList />\n      <ButtonAdd />\n    </>\n  );\n};\n\nexport default Contacts;\n"],"names":["StyledFab","styled","Fab","position","zIndex","bottom","right","ButtonAdd","color","Add","Contact","name","number","ListItemAvatar","Avatar","ListItemText","primary","secondary","Typography","sx","display","component","variant","selectContacts","state","contacts","items","ContactsList","useSelector","filter","getFilter","filteredContacts","contact","toLowerCase","includes","sort","a","b","localeCompare","groupedContacts","map","firstLeter","toUpperCase","push","Paper","square","pt","List","Object","entries","symbol","Fragment","ListSubheader","bgcolor","ListItem","p","width","id","button","alignItems","Divider","dispatch","useDispatch","useEffect","fetchContacts"],"sourceRoot":""}